// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now())

  Subdomain Subdomain[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Subdomain {
  id        String   @id @default(cuid())
  name      String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id           String      @id @default(cuid())
  name         String
  initials     String
  url          String
  location     String
  locationLink String
  description  String
  summary      String
  avatar       String
  skills       String[]
  contact      Contact?    @relation
  works        Work[]
  projects     Project[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  subdomains   Subdomain[]
}

model Work {
  id          String   @id @default(cuid())
  company     String
  href        String
  badges      String[]
  location    String
  title       String
  logoUrl     String?
  start       String
  end         String
  description String
  profileId   String
  profile     Profile  @relation(fields: [profileId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Project {
  id           String   @id @default(cuid())
  title        String
  href         String
  dates        String
  active       Boolean  @default(true)
  description  String
  technologies String[]
  links        Link[]
  image        String?
  video        String?
  profileId    String
  profile      Profile  @relation(fields: [profileId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Link {
  id        String   @id @default(cuid())
  type      String
  href      String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        String   @id @default(cuid())
  email     String
  social    Social[]
  profileId String   @unique
  profile   Profile  @relation(fields: [profileId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Social {
  id        String   @id @default(cuid())
  name      String
  url       String
  icon      String
  navbar    Boolean  @default(false)
  contactId String
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
